//Java Program - Palindrome checking of linked list(SLL)
//Floyd's Algorithm
//reverse of second half linked list
import java.util.*;
class Node{
    int data;
    Node next;
    Node(int data)
    {
        this.data=data;
        this.next=null;
    }
}
public class Main
{
	public static void main(String[] args) {
	 Scanner sc=new Scanner(System.in);
	 Main m=new Main();
	 Node head=m.createList(sc);
	 m.display(head);
	  System.out.println(m.checkpalindrome(head));
	}
	public Node createList(Scanner sc)
	{  
	    Node head=null;
	    Node tail=null;
	    while(true)
	    {
	        int val=sc.nextInt();
	        if(val==-1) break;
	        Node nn=new Node(val);
	        if(head==null){
	            head=nn;
	            tail=nn;
	        } 
	        else{
	            tail.next=nn;
	            tail=tail.next;
	        }
	       
	    }
	     return head;
	}
	public void display(Node head)
	{
	    while(head!=null)
	    {
	        System.out.println(head.data);
	        head=head.next;
	    }
	}
	public boolean checkpalindrome(Node head)
	{
	    Node slow=head;
	    Node fast=head;
	    while(fast.next!=null && fast.next.next!=null)
	    {
	        slow=slow.next;
	        fast=fast.next.next;
	    }
	    
	    slow=slow.next;
	    Node head2=null;
	    while(slow!=null)
	    {
	        Node next=slow.next;
	        slow.next=head2;
	        head2=slow;
	        slow=next;
	    }
	    while(head2!=null)
	    {
	        if(head.data!=head2.data)
	        return false;
	        head=head.next;
	        head2=head2.next;
	    }
	    return true;
	}
}